//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/System/HeroInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""HeroInputSystem"",
    ""maps"": [
        {
            ""name"": ""Mouse"",
            ""id"": ""391c4be3-2159-4fde-ba2b-66d7c16f3742"",
            ""actions"": [
                {
                    ""name"": ""MouseRotation"",
                    ""type"": ""Value"",
                    ""id"": ""ca13de6b-2109-4b74-a5f9-1df33629ad2e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftClickMouse"",
                    ""type"": ""Button"",
                    ""id"": ""ad20c88d-2a3f-4fb0-9cfc-8a327216907d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""06193260-a030-40d3-bfec-7cc51cb21e16"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbccea2e-4c9b-43ec-8af0-87dbb96b1473"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClickMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""KeyBoard"",
            ""id"": ""076a51bb-4379-4395-aae6-36a35d271693"",
            ""actions"": [
                {
                    ""name"": ""Q"",
                    ""type"": ""Button"",
                    ""id"": ""f17f397f-3019-4ed8-8e7e-87d0455500d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dc1f100e-065e-4d24-994d-25800128de08"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Q"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_MouseRotation = m_Mouse.FindAction("MouseRotation", throwIfNotFound: true);
        m_Mouse_LeftClickMouse = m_Mouse.FindAction("LeftClickMouse", throwIfNotFound: true);
        // KeyBoard
        m_KeyBoard = asset.FindActionMap("KeyBoard", throwIfNotFound: true);
        m_KeyBoard_Q = m_KeyBoard.FindAction("Q", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mouse
    private readonly InputActionMap m_Mouse;
    private List<IMouseActions> m_MouseActionsCallbackInterfaces = new List<IMouseActions>();
    private readonly InputAction m_Mouse_MouseRotation;
    private readonly InputAction m_Mouse_LeftClickMouse;
    public struct MouseActions
    {
        private PlayerInput m_Wrapper;
        public MouseActions(PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseRotation => m_Wrapper.m_Mouse_MouseRotation;
        public InputAction @LeftClickMouse => m_Wrapper.m_Mouse_LeftClickMouse;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void AddCallbacks(IMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseActionsCallbackInterfaces.Add(instance);
            @MouseRotation.started += instance.OnMouseRotation;
            @MouseRotation.performed += instance.OnMouseRotation;
            @MouseRotation.canceled += instance.OnMouseRotation;
            @LeftClickMouse.started += instance.OnLeftClickMouse;
            @LeftClickMouse.performed += instance.OnLeftClickMouse;
            @LeftClickMouse.canceled += instance.OnLeftClickMouse;
        }

        private void UnregisterCallbacks(IMouseActions instance)
        {
            @MouseRotation.started -= instance.OnMouseRotation;
            @MouseRotation.performed -= instance.OnMouseRotation;
            @MouseRotation.canceled -= instance.OnMouseRotation;
            @LeftClickMouse.started -= instance.OnLeftClickMouse;
            @LeftClickMouse.performed -= instance.OnLeftClickMouse;
            @LeftClickMouse.canceled -= instance.OnLeftClickMouse;
        }

        public void RemoveCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseActions @Mouse => new MouseActions(this);

    // KeyBoard
    private readonly InputActionMap m_KeyBoard;
    private List<IKeyBoardActions> m_KeyBoardActionsCallbackInterfaces = new List<IKeyBoardActions>();
    private readonly InputAction m_KeyBoard_Q;
    public struct KeyBoardActions
    {
        private PlayerInput m_Wrapper;
        public KeyBoardActions(PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Q => m_Wrapper.m_KeyBoard_Q;
        public InputActionMap Get() { return m_Wrapper.m_KeyBoard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyBoardActions set) { return set.Get(); }
        public void AddCallbacks(IKeyBoardActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyBoardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyBoardActionsCallbackInterfaces.Add(instance);
            @Q.started += instance.OnQ;
            @Q.performed += instance.OnQ;
            @Q.canceled += instance.OnQ;
        }

        private void UnregisterCallbacks(IKeyBoardActions instance)
        {
            @Q.started -= instance.OnQ;
            @Q.performed -= instance.OnQ;
            @Q.canceled -= instance.OnQ;
        }

        public void RemoveCallbacks(IKeyBoardActions instance)
        {
            if (m_Wrapper.m_KeyBoardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyBoardActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyBoardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyBoardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyBoardActions @KeyBoard => new KeyBoardActions(this);
    public interface IMouseActions
    {
        void OnMouseRotation(InputAction.CallbackContext context);
        void OnLeftClickMouse(InputAction.CallbackContext context);
    }
    public interface IKeyBoardActions
    {
        void OnQ(InputAction.CallbackContext context);
    }
}
